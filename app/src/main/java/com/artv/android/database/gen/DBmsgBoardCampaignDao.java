package com.artv.android.database.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.artv.android.database.gen.DBmsgBoardCampaign;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBMSG_BOARD_CAMPAIGN.
*/
public class DBmsgBoardCampaignDao extends AbstractDao<DBmsgBoardCampaign, Long> {

    public static final String TABLENAME = "DBMSG_BOARD_CAMPAIGN";

    /**
     * Properties of entity DBmsgBoardCampaign.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CrcVersion = new Property(1, Integer.class, "crcVersion", false, "CRC_VERSION");
        public final static Property StartDate = new Property(2, Long.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(3, Long.class, "endDate", false, "END_DATE");
        public final static Property PlayDay = new Property(4, String.class, "playDay", false, "PLAY_DAY");
        public final static Property TextColor = new Property(5, String.class, "textColor", false, "TEXT_COLOR");
        public final static Property RightBkgURL = new Property(6, String.class, "RightBkgURL", false, "RIGHT_BKG_URL");
        public final static Property BottomBkgURL = new Property(7, String.class, "BottomBkgURL", false, "BOTTOM_BKG_URL");
    };

    private DaoSession daoSession;


    public DBmsgBoardCampaignDao(DaoConfig config) {
        super(config);
    }
    
    public DBmsgBoardCampaignDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBMSG_BOARD_CAMPAIGN' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CRC_VERSION' INTEGER," + // 1: crcVersion
                "'START_DATE' INTEGER," + // 2: startDate
                "'END_DATE' INTEGER," + // 3: endDate
                "'PLAY_DAY' TEXT," + // 4: playDay
                "'TEXT_COLOR' TEXT," + // 5: textColor
                "'RIGHT_BKG_URL' TEXT," + // 6: RightBkgURL
                "'BOTTOM_BKG_URL' TEXT);"); // 7: BottomBkgURL
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBMSG_BOARD_CAMPAIGN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBmsgBoardCampaign entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer crcVersion = entity.getCrcVersion();
        if (crcVersion != null) {
            stmt.bindLong(2, crcVersion);
        }
 
        Long startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(3, startDate);
        }
 
        Long endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(4, endDate);
        }
 
        String playDay = entity.getPlayDay();
        if (playDay != null) {
            stmt.bindString(5, playDay);
        }
 
        String textColor = entity.getTextColor();
        if (textColor != null) {
            stmt.bindString(6, textColor);
        }
 
        String RightBkgURL = entity.getRightBkgURL();
        if (RightBkgURL != null) {
            stmt.bindString(7, RightBkgURL);
        }
 
        String BottomBkgURL = entity.getBottomBkgURL();
        if (BottomBkgURL != null) {
            stmt.bindString(8, BottomBkgURL);
        }
    }

    @Override
    protected void attachEntity(DBmsgBoardCampaign entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBmsgBoardCampaign readEntity(Cursor cursor, int offset) {
        DBmsgBoardCampaign entity = new DBmsgBoardCampaign( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // crcVersion
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // startDate
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // endDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // playDay
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // textColor
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // RightBkgURL
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // BottomBkgURL
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBmsgBoardCampaign entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCrcVersion(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setStartDate(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setEndDate(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setPlayDay(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTextColor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRightBkgURL(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBottomBkgURL(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBmsgBoardCampaign entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBmsgBoardCampaign entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
