package com.artv.android.database.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBCAMPAIGNS_ASSETS".
*/
public class DBCampaignsAssetsDao extends AbstractDao<DBCampaignsAssets, Long> {

    public static final String TABLENAME = "DBCAMPAIGNS_ASSETS";

    /**
     * Properties of entity DBCampaignsAssets.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CampaignId = new Property(1, Integer.class, "campaignId", false, "CAMPAIGN_ID");
        public final static Property AssetId = new Property(2, Integer.class, "assetId", false, "ASSET_ID");
    };

    private DaoSession daoSession;


    public DBCampaignsAssetsDao(DaoConfig config) {
        super(config);
    }
    
    public DBCampaignsAssetsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBCAMPAIGNS_ASSETS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CAMPAIGN_ID\" INTEGER," + // 1: campaignId
                "\"ASSET_ID\" INTEGER);"); // 2: assetId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBCAMPAIGNS_ASSETS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBCampaignsAssets entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer campaignId = entity.getCampaignId();
        if (campaignId != null) {
            stmt.bindLong(2, campaignId);
        }
 
        Integer assetId = entity.getAssetId();
        if (assetId != null) {
            stmt.bindLong(3, assetId);
        }
    }

    @Override
    protected void attachEntity(DBCampaignsAssets entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBCampaignsAssets readEntity(Cursor cursor, int offset) {
        DBCampaignsAssets entity = new DBCampaignsAssets( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // campaignId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // assetId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBCampaignsAssets entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCampaignId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAssetId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBCampaignsAssets entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBCampaignsAssets entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
