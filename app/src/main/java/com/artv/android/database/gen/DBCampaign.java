package com.artv.android.database.gen;

import java.util.List;
import com.artv.android.database.gen.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DBCAMPAIGN.
 */
public class DBCampaign {

    private Long id;
    private Integer crcVersion;
    private Long startDate;
    private Long endDate;
    private Integer sequence;
    private String playDay;
    private String overrideTime;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBCampaignDao myDao;

    private List<DBAsset> assets;

    public DBCampaign() {
    }

    public DBCampaign(Long id) {
        this.id = id;
    }

    public DBCampaign(Long id, Integer crcVersion, Long startDate, Long endDate, Integer sequence, String playDay, String overrideTime) {
        this.id = id;
        this.crcVersion = crcVersion;
        this.startDate = startDate;
        this.endDate = endDate;
        this.sequence = sequence;
        this.playDay = playDay;
        this.overrideTime = overrideTime;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBCampaignDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getCrcVersion() {
        return crcVersion;
    }

    public void setCrcVersion(Integer crcVersion) {
        this.crcVersion = crcVersion;
    }

    public Long getStartDate() {
        return startDate;
    }

    public void setStartDate(Long startDate) {
        this.startDate = startDate;
    }

    public Long getEndDate() {
        return endDate;
    }

    public void setEndDate(Long endDate) {
        this.endDate = endDate;
    }

    public Integer getSequence() {
        return sequence;
    }

    public void setSequence(Integer sequence) {
        this.sequence = sequence;
    }

    public String getPlayDay() {
        return playDay;
    }

    public void setPlayDay(String playDay) {
        this.playDay = playDay;
    }

    public String getOverrideTime() {
        return overrideTime;
    }

    public void setOverrideTime(String overrideTime) {
        this.overrideTime = overrideTime;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DBAsset> getAssets() {
        if (assets == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBAssetDao targetDao = daoSession.getDBAssetDao();
            List<DBAsset> assetsNew = targetDao._queryDBCampaign_Assets(id);
            synchronized (this) {
                if(assets == null) {
                    assets = assetsNew;
                }
            }
        }
        return assets;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAssets() {
        assets = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
