package com.artv.android.database.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBASSET".
*/
public class DBAssetDao extends AbstractDao<DBAsset, Long> {

    public static final String TABLENAME = "DBASSET";

    /**
     * Properties of entity DBAsset.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property Duration = new Property(3, Integer.class, "duration", false, "DURATION");
        public final static Property Sequence = new Property(4, Integer.class, "sequence", false, "SEQUENCE");
        public final static Property CampaignsAssetsId = new Property(5, long.class, "campaignsAssetsId", false, "CAMPAIGNS_ASSETS_ID");
    };

    private Query<DBAsset> dBCampaignsAssets_AssetsQuery;

    public DBAssetDao(DaoConfig config) {
        super(config);
    }
    
    public DBAssetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBASSET\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"URL\" TEXT," + // 2: url
                "\"DURATION\" INTEGER," + // 3: duration
                "\"SEQUENCE\" INTEGER," + // 4: sequence
                "\"CAMPAIGNS_ASSETS_ID\" INTEGER NOT NULL );"); // 5: campaignsAssetsId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBASSET\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBAsset entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(4, duration);
        }
 
        Integer sequence = entity.getSequence();
        if (sequence != null) {
            stmt.bindLong(5, sequence);
        }
        stmt.bindLong(6, entity.getCampaignsAssetsId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBAsset readEntity(Cursor cursor, int offset) {
        DBAsset entity = new DBAsset( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // duration
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // sequence
            cursor.getLong(offset + 5) // campaignsAssetsId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBAsset entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDuration(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSequence(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCampaignsAssetsId(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBAsset entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBAsset entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "assets" to-many relationship of DBCampaignsAssets. */
    public List<DBAsset> _queryDBCampaignsAssets_Assets(long campaignsAssetsId) {
        synchronized (this) {
            if (dBCampaignsAssets_AssetsQuery == null) {
                QueryBuilder<DBAsset> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CampaignsAssetsId.eq(null));
                dBCampaignsAssets_AssetsQuery = queryBuilder.build();
            }
        }
        Query<DBAsset> query = dBCampaignsAssets_AssetsQuery.forCurrentThread();
        query.setParameter(0, campaignsAssetsId);
        return query.list();
    }

}
